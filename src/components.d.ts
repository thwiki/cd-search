/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { RouteQuery } from "@utils/router";
import { LocaleService } from "@locale";
import { FilterOption, TaglistItem } from "./components/thcd-filters/filter-options";
import { InputBaseValueChangedEventDetial, InputBaseValueChangeEventDetial } from "./components/input-base/input-base";
import { Item, ItemCriteria } from "@utils/options";
export namespace Components {
    interface AppHome {
        "query": RouteQuery;
    }
    interface AppProfile {
        "name": string;
    }
    interface AppRoot {
        "getLocale": () => Promise<LocaleService>;
        "language": string;
    }
    interface InputChecklist {
        "addValue": (value: string) => Promise<void>;
        "hasValue": (value: string) => Promise<boolean>;
        "option": FilterOption;
        "query": string;
        "removeValue": (value: string) => Promise<void>;
    }
    interface InputRange {
        "addValue": (value: string) => Promise<void>;
        "hasValue": (value: string) => Promise<boolean>;
        "option": FilterOption;
        "query": string;
        "removeValue": (value: string) => Promise<void>;
    }
    interface InputTaglist {
        "addValue": (value: string) => Promise<void>;
        "hasValue": (value: string) => Promise<boolean>;
        "option": FilterOption;
        "query": string;
        "removeValue": (value: string) => Promise<void>;
    }
    interface InputTaglistModal {
        "option": FilterOption;
    }
    interface InputTaglistPopover {
        "suggestions": TaglistItem[];
    }
    interface ThcdFilters {
        "criteria": ItemCriteria;
        "query": RouteQuery;
    }
    interface ThcdI18n {
    }
    interface ThcdTrack {
        "item": Item;
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLInputChecklistElement extends Components.InputChecklist, HTMLStencilElement {
    }
    var HTMLInputChecklistElement: {
        prototype: HTMLInputChecklistElement;
        new (): HTMLInputChecklistElement;
    };
    interface HTMLInputRangeElement extends Components.InputRange, HTMLStencilElement {
    }
    var HTMLInputRangeElement: {
        prototype: HTMLInputRangeElement;
        new (): HTMLInputRangeElement;
    };
    interface HTMLInputTaglistElement extends Components.InputTaglist, HTMLStencilElement {
    }
    var HTMLInputTaglistElement: {
        prototype: HTMLInputTaglistElement;
        new (): HTMLInputTaglistElement;
    };
    interface HTMLInputTaglistModalElement extends Components.InputTaglistModal, HTMLStencilElement {
    }
    var HTMLInputTaglistModalElement: {
        prototype: HTMLInputTaglistModalElement;
        new (): HTMLInputTaglistModalElement;
    };
    interface HTMLInputTaglistPopoverElement extends Components.InputTaglistPopover, HTMLStencilElement {
    }
    var HTMLInputTaglistPopoverElement: {
        prototype: HTMLInputTaglistPopoverElement;
        new (): HTMLInputTaglistPopoverElement;
    };
    interface HTMLThcdFiltersElement extends Components.ThcdFilters, HTMLStencilElement {
    }
    var HTMLThcdFiltersElement: {
        prototype: HTMLThcdFiltersElement;
        new (): HTMLThcdFiltersElement;
    };
    interface HTMLThcdI18nElement extends Components.ThcdI18n, HTMLStencilElement {
    }
    var HTMLThcdI18nElement: {
        prototype: HTMLThcdI18nElement;
        new (): HTMLThcdI18nElement;
    };
    interface HTMLThcdTrackElement extends Components.ThcdTrack, HTMLStencilElement {
    }
    var HTMLThcdTrackElement: {
        prototype: HTMLThcdTrackElement;
        new (): HTMLThcdTrackElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "input-checklist": HTMLInputChecklistElement;
        "input-range": HTMLInputRangeElement;
        "input-taglist": HTMLInputTaglistElement;
        "input-taglist-modal": HTMLInputTaglistModalElement;
        "input-taglist-popover": HTMLInputTaglistPopoverElement;
        "thcd-filters": HTMLThcdFiltersElement;
        "thcd-i18n": HTMLThcdI18nElement;
        "thcd-track": HTMLThcdTrackElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
        "query"?: RouteQuery;
    }
    interface AppProfile {
        "name"?: string;
    }
    interface AppRoot {
        "language"?: string;
    }
    interface InputChecklist {
        "onValue-change"?: (event: CustomEvent<InputBaseValueChangeEventDetial>) => void;
        "onValue-changed"?: (event: CustomEvent<InputBaseValueChangedEventDetial>) => void;
        "option"?: FilterOption;
        "query"?: string;
    }
    interface InputRange {
        "onValue-change"?: (event: CustomEvent<InputBaseValueChangeEventDetial>) => void;
        "onValue-changed"?: (event: CustomEvent<InputBaseValueChangedEventDetial>) => void;
        "option"?: FilterOption;
        "query"?: string;
    }
    interface InputTaglist {
        "onValue-change"?: (event: CustomEvent<InputBaseValueChangeEventDetial>) => void;
        "onValue-changed"?: (event: CustomEvent<InputBaseValueChangedEventDetial>) => void;
        "option"?: FilterOption;
        "query"?: string;
    }
    interface InputTaglistModal {
        "option"?: FilterOption;
    }
    interface InputTaglistPopover {
        "suggestions"?: TaglistItem[];
    }
    interface ThcdFilters {
        "criteria"?: ItemCriteria;
        "onCriteria-change"?: (event: CustomEvent<ItemCriteria>) => void;
        "query"?: RouteQuery;
    }
    interface ThcdI18n {
    }
    interface ThcdTrack {
        "item"?: Item;
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "input-checklist": InputChecklist;
        "input-range": InputRange;
        "input-taglist": InputTaglist;
        "input-taglist-modal": InputTaglistModal;
        "input-taglist-popover": InputTaglistPopover;
        "thcd-filters": ThcdFilters;
        "thcd-i18n": ThcdI18n;
        "thcd-track": ThcdTrack;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "input-checklist": LocalJSX.InputChecklist & JSXBase.HTMLAttributes<HTMLInputChecklistElement>;
            "input-range": LocalJSX.InputRange & JSXBase.HTMLAttributes<HTMLInputRangeElement>;
            "input-taglist": LocalJSX.InputTaglist & JSXBase.HTMLAttributes<HTMLInputTaglistElement>;
            "input-taglist-modal": LocalJSX.InputTaglistModal & JSXBase.HTMLAttributes<HTMLInputTaglistModalElement>;
            "input-taglist-popover": LocalJSX.InputTaglistPopover & JSXBase.HTMLAttributes<HTMLInputTaglistPopoverElement>;
            "thcd-filters": LocalJSX.ThcdFilters & JSXBase.HTMLAttributes<HTMLThcdFiltersElement>;
            "thcd-i18n": LocalJSX.ThcdI18n & JSXBase.HTMLAttributes<HTMLThcdI18nElement>;
            "thcd-track": LocalJSX.ThcdTrack & JSXBase.HTMLAttributes<HTMLThcdTrackElement>;
        }
    }
}
